Partie 3 :

Voici le programme de la partie 3 :

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int main() {

    int Tube[2];
    pipe(Tube);

    if (fork() == 0) {     //processus fils
        char c[40];
        while (strcmp(c, "exit") != 0) {
            printf("Reception d'un message : ");
            read(Tube[0], c, 40);
            printf("%s\n", c);
        }

    } else {               //processus parent
        char c[40];
        while (strcmp(c, "exit") != 0) {
            printf("Envoi d'un message : ");
            fflush(stdin);
            scanf("%s", c);
            write(Tube[1], c, 40);
            sleep(1);
        }

    }

    return EXIT_SUCCESS;
}




Partie 4 :

D'après le scénario, le processus père (Dieu) doit créer 2 processus fils (John et le Roi).
Le processus du Roi créer n processus fils (les n soldats de l'armée des morts).
Le processus du Soldat doit écrire dans un tube nommé son pid et, seulement pour le dernier soldat, celui de son père (le processus du Roi). Ensuite il attend d'être exit() par son handler de SIGUSR2.
Le processus de John doit, en boucle, lire un tube nommé et envoyer SIGUSR2 au pid transmis dans le tube. Lorsque le dernier soldat vient, il apporte 2 pid. C'est comme ça que le processus de john prend connaissance du pid du Roi.
L'information transmise dans le tube nommé est enfaite une structure dans laquelle il y a deux champs : un pour le pid du soldat et un pour celui du roi (= 0 quand ce n'est pas le dernier soldat).
Après un sleep(x) avec x une valeur aléatoire comprise dans [min;max] (valeurs définies arbitrairement), le processus de john et celui du roi envoient chacun un SIGKILL à l'autre.
Evidemment, le premier qui l'envoie tue l'autre et ne recoit donc pas son SIGKILL.
Pendant ce temps, le processus de Dieu (le père) attend avec un wait() la mort d'un de ses fils. Quand cela arrive, il récupère le pid du fils mort et le compare à ceux qu'il a stocké dans des variables. Le gagnant peut donc être annoncé.

Voici le programme de la partie 4 :

// inclusion des bibliothèques
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <signal.h>
#include <unistd.h>
#include <sys/wait.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>

// définition et instanciation des variables globalent (ici ce sont des constantes)
const char *tube = "/tmp/myfifo";
const int nbSoldat = 10;

// définition de la structure transmise dans le tube
struct pidInfo
{
    pid_t pidSoldat;
    pid_t pidMarcheurBlanc;
};

// génère une valeur aléatoire comprise dans l'interval [min;max]
int generateRandom(int min, int max)
{
    float result;
    srand(time(NULL)); // initialisation de la graine de génération de nombres aléatoires
    if (min < 0)       // pour les besoins du programme, je ne veux pas généner de valeur négative
    {
        printf("Erreur : fonction generateRandom : valeur min negative.\n");
        exit(EXIT_FAILURE);
    }
    do
    {
        result = (rand() % 101) / (100 / max); // formule pour obtenir un nombre dans la range voulue
    } while (result < min || result > max);
    return (int)result;
}

// handler du SIGUSR2
void handler()
{
    exit(EXIT_SUCCESS);
}

// fonction qui gère le processus du soldat (fils du Roi)
void soldat(int in// inclusion des bibliothèques
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <signal.h>
#include <unistd.h>
#include <sys/wait.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>

// définition et instanciation des variables globalent (ici ce sont des constantes)
const char *tube = "/tmp/myfifo";
const int nbSoldat = 10;

// définition de la structure transmise dans le tube
struct pidInfo
{
    pid_t pidSoldat;
    pid_t pidMarcheurBlanc;
};

// génère une valeur aléatoire comprise dans l'interval [min;max]
int generateRandom(int min, int max)
{
    float result;
    srand(time(NULL)); // initialisation de la graine de génération de nombres aléatoires
    if (min < 0)       // pour les besoins du programme, je ne veux pas généner de valeur négative
    {
        printf("Erreur : fonction generateRandom : valeur min negative.\n");
        exit(EXIT_FAILURE);
    }
    do
    {
        result = (rand() % 101) / (100 / max); // formule pour obtenir un nombre dans la range voulue
    } while (result < min || result > max);
    return (int)result;
}

// handler du SIGUSR2
void handler()
{
    exit(EXIT_SUCCESS);
}

// fonction qui gère le processus du soldat (fils du Roi)
void soldat(int index)
{
    int fd = open(tube, O_WRONLY); // ouverture du descripteur de fichier (= ouverture du tube)
    struct pidInfo info;

    printf("Soldat %i : J'attaque john ! (pid : %i)\n", index, getpid());

    signal(SIGUSR2, handler); // configuration du handler pour le SIGUSR2

    // initialisation des données à envoyer
    info.pidSoldat = getpid();
    if (index == nbSoldat)
        info.pidMarcheurBlanc = getppid();
    else
        info.pidMarcheurBlanc = 0;

    write(fd, &info, sizeof(struct pidInfo)); // écriture des données dans le tube
    close(fd);                                // fermeture du descripteur de fichier (= fermeture du tube)
    pause();                                  // le processus attend de recevoir un signal (ici SIGUSR2)
}

// fonction qui gère le processus du Roi (fils du Dieu)
void marcheurBlanc(int pidJohn)
{
    int nbSoldatGenere = 0;

    while (nbSoldatGenere < nbSoldat) // boucle tant que le processus Roi n'a pas généré assez de processus soldat
    {
        if (fork() == 0) // processus soldat
            soldat(nbSoldatGenere + 1);
        else // processus Roi
        {
            nbSoldatGenere++;
            wait(NULL); // attend que son fils meurt avant d'en générer un nouveau
        }
    }
    printf("Marcheur : tous les soldats ont ete envoyes et sont mort (nombre de soldat genere : %i)\n", nbSoldatGenere);

    printf("Marcheur : John Snow, tu vas mourir !\n");
    sleep(generateRandom(1, 5)); // attend une durée aléatoire entre 1 et 5 secondes
    kill(pidJohn, SIGKILL);      // envoie SIGKILL au pid du processus de John
    sleep(1);                    // attend 1 seconde par sécurité pour ne pas que ce processus se termine avant celui de John et que Dieu récupère le mauvais pid avec son wait()
    exit(EXIT_SUCCESS);          // termine le processus
}

// fonction qui gère le processus de John
void johnSnow()
{
    struct pidInfo info = {0, 0};
    while (1) // boucle à l'infinie
    {
        int fd = open(tube, O_RDONLY);           // ouverture du tube
        read(fd, &info, sizeof(struct pidInfo)); // lecture du tube
        if (info.pidSoldat != 0)                 // s'il y a une info dans le tube = un soldat arrive
        {
            printf("John : Je recois un soldat ! (pid soldat = %i | pid Marcheur = %i)\n", info.pidSoldat, info.pidMarcheurBlanc);
            kill(info.pidSoldat, SIGUSR2); // envoie de SIGUSR2 au pid du soldat
            info.pidSoldat = 0;
        }
        close(fd);                      // fermeture du tube
        if (info.pidMarcheurBlanc != 0) // si john reçoit le pid du Roi, il faut quitter la boucle
            break;
    }
    printf("John : Dernier soldat mort ! Pid du Marcheur Blanc : %i\n", info.pidMarcheurBlanc);

    printf("John : Marcheur Blanc, tu vas mourir !\n");
    sleep(generateRandom(1, 5));          // attend une durée aléatoire entre 1 et 5 secondes
    kill(info.pidMarcheurBlanc, SIGKILL); // envoie SIGKILL au pid du processus du Roi
    sleep(1);                             // attend 1 seconde par sécurité pour ne pas que ce processus se termine avant celui de John et que Dieu récupère le mauvais pid avec son wait()
    exit(EXIT_SUCCESS);                   // termine le processus
}

int main()
{
    pid_t pidJohn, pidMarcheur, retPid; // déclaration des variables
    mkfifo(tube, 0666);                 // création du FIFO (= du tube) au chemin voulu et avec les permissions voulues.

    printf("--- Debut de la bataille de Durlieu ---\n");

    pidJohn = fork();
    if (pidJohn == 0) // processus fils --> John Snow
        johnSnow();
    else
    {
        pidMarcheur = fork();
        if (pidMarcheur == 0) // processus fils --> Marcheur blanc
            marcheurBlanc(pidJohn);
        else // processus père --> Dieu
        {
            retPid = wait(NULL);   // attend la mort d'un fils et recupère son pid
            if (retPid == pidJohn) // compare les pid pour déclarer le vainqueur
                printf("Marcheur : J'ai gagne !\n");
            else if (retPid == pidMarcheur)
                printf("John : J'ai gagne !\n");
        }
    }

    printf("--- Fin de la bataille de Durlieu ---\n");

    return EXIT_SUCCESS;
}





Partie 5 :

Je n'ai pas réussi à finir cette partie par manque de temps et de compétence, mais j'ai l'impression d'être sur la bonne voie.
Je pense que le problème (en tout cas une partie) vient du fait que le système de sémaphore que j'essaye d'implémenté est lui-même une zone critique, donc interrogeable par plusieurs processus simultanéments.
Egalement, la consigne était de n'utiliser que des tubes. Or, pour arriver à mon résultat, j'ai dû utiliser des zones mémoires partagées. Je pense donc être un peu en dehors des consignes.
Ceci dit, je ne sais pas si c'est possible de réussi l'exercice sans utiliser de mémoire partager ni de signaux... Si oui, je pense que ça donne quelque chose d'assez complexe en terme de synchronisation des données avec les tubes.

Malgré ce semi-echec, j'ai appris plusieurs choses :
    - Les pointeurs ne peuvent pointer que vers un element dans leur propre processus;
    - Les zones mémoires partagées sont assez simples à utiliser mais représentent dans cette situation une zone critique;
    - La création de MakeFile (ici j'en ai écrit un simple mais j'ai pu en voir d'autres plus complets).

Voici le code commenté de la partie 5 :

makefile :

test: mutex.c sematube.c sematube.h
	gcc -o test mutex.c sematube.c -I.

mutex.c :

// include all the librairies
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <sys/wait.h>

// include the dependency
#include "sematube.h"

int main(int argc, char **argv)
{
    // variables statements
    sematube sem;
    const int nbFork = 3;
    int i;
    pid_t pid;
    char debug;

    // handling the program's arguments
    if (argc > 1 && strcmp(argv[1], "--help") == 0)
    {
        printf("-d    Debug mode.\n");
        return EXIT_SUCCESS;
    }
    else if (argc > 1 && strcmp(argv[1], "-d") == 0)
        debug = 1;
    else
        debug = 0;

    // set up the sematube
    e(&sem, 1, debug);

    // create nbFork child processes
    for (i = 0; i < nbFork; i++)
    {
        pid = fork();
        if (pid == 0)
        {
            // procedure to check that the sematube is working (spoiler : no)
            printf("child(%i#%i) forked.\n", i, getpid());
            P(&sem);
            printf("  child(%i#%i) is in critical section.\n", i, getpid());
            sleep(1);
            V(&sem);
            printf("  child(%i#%i) is no longer in critical section.\n", i, getpid());
            break;
        }
    }

    // the father process wait the death of his children
    if (pid != 0)
        sleep(5);

    return EXIT_SUCCESS;
}

sematube.h :

#ifndef SEMATUBE
#define SEMATUBE

/**
 * @brief The sematube structure
 *
 */
typedef struct
{
    int tokens;
    int size;
} sematube;

/**
 * @brief P() decrements (locks) the semaphore pointed to by S. If the semaphore's value is greater than zero, then the decrement proceeds, and  the function returns, immediately. If the semaphore currently has the value zero, then the call blocks until either it becomes possible to perform the decrement (i.e., the semaphore value rises above zero), or a signal handler interrupts the call.
 * See V() and e().
 *
 * @param S The semaphore.
 * @return EXIT_SUCCESS on success; EXIT_FAILURE on failure.
 */
int P(sematube *S);

/**
 * @brief V() increments (unlocks) the semaphore pointed to by S. If the semaphore's value consequently becomes greater than zero, then  another process or thread blocked in a P() call will be woken up and proceed to lock the semaphore.
 * See P() and e().
 *
 * @param S The semaphore.
 * @return EXIT_SUCCESS on success; EXIT_FAILURE on failure.
 */
int V(sematube *S);

/**
 * @brief e() initializes the unnamed semaphore at the address pointed to by S. The n argument specifies the initial value for the semaphore.
 * See V() and P().
 *
 * @param S The semaphore.
 * @param n The initial value for the semaphore.
 * @param debug The boolean for debug mode.
 * @return EXIT_SUCCESS on success; EXIT_FAILURE on failure.
 */
int e(sematube *S, int n, char debug);

#endif

sematube.c :

// include all the librairies
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <signal.h>
#include <string.h>
#include <signal.h>
#include <fcntl.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <sys/mman.h>

// include the header file
#include "sematube.h"

/* elements which handle the debug mode */

/**
 * @brief If true, print debug message. Else, no debug message.
 *
 */
char debug;

/* elements which handle the shared memory */

/**
 * @brief Semaphore shmem.
 *
 */
void *shmem_sem;
/**
 * @brief Queue shmem.
 *
 */
void *shmem_queue;

/**
 * @brief Create a shared memory area (shmem).
 * Find on StackOverflow.
 *
 * @param size The size of the shmem area une bytes.
 * @return The shmem object.
 */
void *create_shmem(size_t size)
{
    // Our memory buffer will be readable and writable :
    int protection = PROT_READ | PROT_WRITE;

    // The buffer will be shared (meaning other processes can access it), but anonymous (meaning third-party processes cannot obtain an address for it), sol only this process and its children will be able to use it :
    int visibility = MAP_SHARED | MAP_ANONYMOUS;

    // The remaining parameters to 'mmap()' are not important for this use case, but the manpage for 'mmap' explains their purpose.
    return mmap(NULL, size, protection, visibility, -1, 0);
}

/**
 * @brief The write_shmem() function copies sizeof(value) bytes from memory area value to memory area shmem. The memory areas must not overlap.
 *
 * @param shmem The destination memory area.
 * @param value The value to copy.
 * @return A pointer to shmem.
 */
void *write_shmem(void *shmem, void *value)
{
    return memcpy(shmem, value, sizeof(value));
}

/**
 * @brief Useless function. Just to simplify the code.
 *
 * @param shmem The shmem area.
 * @return The shmem area.
 */
void *read_shmem(void *shmem)
{
    return shmem;
}

/* elements which handle the named pipe */

/**
 * @brief The named pipe's path.
 *
 */
const char *named_pipe = "/tmp/sematube_named_pipe";

/**
 * @brief Read the named pipe.
 *
 * @param value A pointer to where you want to get the read value.
 * @return See man read(2).
 */
ssize_t read_pipe(void *value)
{
    int fd = open(named_pipe, O_RDONLY);             // get the file descriptor
    ssize_t retval = read(fd, value, sizeof(value)); // read the pipe
    close(fd);                                       // close the fd
    return retval;
}

/**
 * @brief Write in the names pipe.
 *
 * @param value The value to write.
 * @return See man write(2).
 */
ssize_t write_pipe(void *value)
{
    int fd = open(named_pipe, O_WRONLY);
    ssize_t retval = write(fd, value, sizeof(value));
    close(fd);
    return retval;
}

/* elements which handle the interruptions */

/**
 * @brief Disable all the signal handler. It's use for the atomics operations.
 *
 */
void disable_interrupt()
{
    int i;
    for (i = 1; i <= 31; i++) // there are 31 utile signals
        signal(i, SIG_IGN);   // ignore them
}

/**
 * @brief Set the default handler for all utile signals.
 *
 */
void enable_interrupt()
{
    int i;
    for (i = 1; i <= 31; i++) // there are 31 utile signals
        signal(i, SIG_DFL);   // set the default signal's handler
}

/* elements which handle the fifo queue */

/**
 * @brief Pointer on element of FIFO pile.
 * From Mrs. Russo's class.
 *
 */
typedef struct el *pel;

/**
 * @brief Element of FIFO pile.
 * From Mrs. Russo's class.
 *
 */
typedef struct el
{
    pid_t pid;
    pel next;
} tel;

/**
 * @brief Create a pel object.
 * From Mrs. Russo's class.
 *
 * @param pid Element of the pel structure.
 * @return pel object.
 */
pel createElem(pid_t pid)
{
    pel tmp;
    tmp = (pel)malloc(sizeof(tel));
    tmp->pid = pid;
    tmp->next = NULL;
    return tmp;
}

/**
 * @brief Add an entry to the end of the FIFO pile.
 * From Mrs. Russo's class.
 *
 * @param f The FIFO pile.
 * @param pid The data to store.
 * @return The FIFO pile.
 */
pel add(pel f, pid_t pid)
{
    pel aux = createElem(pid);
    pel tmp = f;
    if (f == NULL)
        return aux;
    else
    {
        while (tmp->next != NULL)
            tmp = tmp->next;
        tmp->next = aux;
        return f;
    }
}

/**
 * @brief Delete the first element of the FIFO pile.
 * From Mrs. Russo's class.
 *
 * @param f The FIFO pile.
 * @return The FIFO pile.
 */
pel erase(pel f)
{
    pel tmp = f;
    if (f != NULL)
    {
        f = f->next;
        free(tmp);
    }
    return f;
}

/* elements which handle the semphore */

/**
 * @brief P() decrements (locks) the semaphore pointed to by S. If the semaphore's value is greater than zero, then the decrement proceeds, and  the function returns, immediately. If the semaphore currently has the value zero, then the call blocks until either it becomes possible to perform the decrement (i.e., the semaphore value rises above zero), or a signal handler interrupts the call.
 * See V() and e().
 *
 * @param S The semaphore.
 * @return EXIT_SUCCESS on success; EXIT_FAILURE on failure.
 */
int P(sematube *sem)
{
    disable_interrupt(); // disableling the interruptions for atomics operations
    if (debug)
        printf("(debug#%i) P function.\n", getpid());
    sem = (sematube *)read_shmem(shmem_sem); // get shmem_sem's sem value
    if (sem->tokens > 0)                     // if there is a token left
    {
        if (debug)
            printf("(debug#%i) tokens decrement.\n", getpid());
        sem->tokens--;
    }
    else // if there isn't any token left
    {
        if (debug)
            printf("(debug#%i) adding process to queue.\n", getpid());
        pel fifo = (pel)read_shmem(shmem_queue); // recover the FIFO pile in her shmem area
        add(fifo, getpid());                     // add a new entry
        write_shmem(shmem_queue, fifo);          // save it in the shmem area
        pid_t pid;
        if (debug)
            printf("(debug#%i) waiting for token.\n", getpid());
        do
        {
            if (debug)
                printf("(debug#%i) reading pipe.\n", getpid());
            read_pipe(&pid); // read the pipe until this process is called to continue
        } while (pid != getpid());
        sem->tokens--;
    }
    write_shmem(shmem_sem, sem); // push the sem in shmem_sem
    enable_interrupt();          // enable the signal's handlers
    return EXIT_SUCCESS;
}

/**
 * @brief V() increments (unlocks) the semaphore pointed to by S. If the semaphore's value consequently becomes greater than zero, then  another process or thread blocked in a P() call will be woken up and proceed to lock the semaphore.
 * See P() and e().
 *
 * @param S The semaphore.
 * @return EXIT_SUCCESS on success; EXIT_FAILURE on failure.
 */
int V(sematube *sem)
{
    disable_interrupt(); // disableling the interruptions for atomics operations
    if (debug)
        printf("(debug#%i) V function.\n", getpid());
    sem = (sematube *)read_shmem(shmem_sem); // get shmem_sem's sem value
    if (sem->tokens < sem->size)             // if it's possible to add another token
    {
        if (debug)
            printf("(debug#%i) tokens increment.\n", getpid());
        sem->tokens++;
        pel fifo = *(pel *)read_shmem(shmem_queue); // read the shmem area to get the FIFO pile
        if (debug)
            printf("(debug#%i) value of fifo : %p.\n", getpid(), fifo);
        if (fifo != NULL)                        // if there is someone in the queue
        {
            pid_t pid = erase(fifo)->pid; // delete it
            if (debug)
                printf("(debug#%i) there's someone in the queue (pid:%i).\n", getpid(), pid);
            write_shmem(shmem_queue, fifo); // update in shmem
            if (debug)
                printf("(debug#%i) writing in pipe.\n", getpid());
            write_pipe(&pid); // broadcast in the pipe the process called pid's
        }
        write_shmem(shmem_sem, sem); // push the sem in shmem_sem
    }
    else
    {
        if (debug)
            printf("(debug#%i) there's already the maximum amount of tokens.\n", getpid());
        enable_interrupt(); // enable the signal's handlers
        return EXIT_FAILURE;
    }
    enable_interrupt(); // enable the signal's handlers
    return EXIT_SUCCESS;
}

/**
 * @brief e() initializes the unnamed semaphore at the address pointed to by S. The n argument specifies the initial value for the semaphore.
 * See V() and P().
 *
 * @param S The semaphore.
 * @param n The initial value for the semaphore.
 * @param debug The boolean for debug mode.
 * @return EXIT_SUCCESS on success; EXIT_FAILURE on failure.
 */
int e(sematube *sem, int n, char bool)
{
    disable_interrupt();             // disableling the interruptions for atomics operations
    debug = bool;                    // set debug value
    pel fifo = NULL;                 // create FIFO pile
    sem->tokens = n;                 // set semaphore structure value's
    sem->size = n;                   // set semaphore structure value's
    shmem_sem = create_shmem(128);   // create shmem for semaphore
    write_shmem(shmem_sem, sem);     // push the sem in shmem_sem
    shmem_queue = create_shmem(128); // create shmem for queue
    write_shmem(shmem_queue, &fifo); // push the queue in shmem_queue
    mkfifo(named_pipe, 0666);        // create the names pipe
    if (debug)
        printf("(debug#%i) Sematube initialized.\n", getpid());
    enable_interrupt(); // enable the signal's handlers
    return EXIT_SUCCESS;
}