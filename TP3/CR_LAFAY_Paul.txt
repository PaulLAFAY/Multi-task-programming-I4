Partie 1 :

Un pointeur de type void* est codé sur 8 octets.
2⁸-1 valeurs soit 2147483646 valeurs peuvent être transmises à la mort d'un thread par ce pointeur.

Grâce à la commande ps -L H, nous pouvons voir que lorsque les 3 threads sont créés, 3 Light Weight Process (LWP) sont créés.
Ils ont le même PID que leur père vu que ce ne sont pas des processus "à part entière".

L'option -lpthread doit être ajoutée à la ligne de commande pour compiler le programme car pthread.h est une dépendance non incluse par défaut par le compilateur. Il en serai de même si nous voulions ajouter une bibliothèque tierce comme SDL.

Voici ce qu'affiche le programme de la partie 1 sur le terminal :

Taille d'un pointeur void : 8
2^8-1 valeurs soit 2147483646 valeurs differentes peuvent etre stockees dans le pointeur void
Pere : pid = 3984
    PID     LWP TTY      STAT   TIME COMMAND
    905     905 tty2     Ssl+   0:00 /usr/libexec/gdm-wayland-session env GNOME_SHELL_SESSION_MODE=ubuntu /usr/bin/gnome-session 
    905     907 tty2     Ssl+   0:00 /usr/libexec/gdm-wayland-session env GNOME_SHELL_SESSION_MODE=ubuntu /usr/bin/gnome-session 
    905     908 tty2     Ssl+   0:00 /usr/libexec/gdm-wayland-session env GNOME_SHELL_SESSION_MODE=ubuntu /usr/bin/gnome-session 
    913     913 tty2     Sl+    0:00 /usr/libexec/gnome-session-binary --session=ubuntu
    913     980 tty2     Sl+    0:00 /usr/libexec/gnome-session-binary --session=ubuntu
    913     981 tty2     Sl+    0:00 /usr/libexec/gnome-session-binary --session=ubuntu
   2200    2200 pts/0    Ss+    0:00 bash
   3673    3673 pts/1    Ss     0:00 /usr/bin/bash --init-file /usr/share/code/resources/app/out/vs/workbench/contrib/terminal/br
   3984    3984 pts/1    S+     0:00 ./main
   3987    3987 pts/1    S+     0:00 sh -c ps -L H
   3988    3988 pts/1    R+     0:00 ps -L H
Thread 3 : pid = 3984
Thread 2 : pid = 3984
Thread 1 : pid = 3984
    PID     LWP TTY      STAT   TIME COMMAND
    905     905 tty2     Ssl+   0:00 /usr/libexec/gdm-wayland-session env GNOME_SHELL_SESSION_MODE=ubuntu /usr/bin/gnome-session 
    905     907 tty2     Ssl+   0:00 /usr/libexec/gdm-wayland-session env GNOME_SHELL_SESSION_MODE=ubuntu /usr/bin/gnome-session 
    905     908 tty2     Ssl+   0:00 /usr/libexec/gdm-wayland-session env GNOME_SHELL_SESSION_MODE=ubuntu /usr/bin/gnome-session 
    913     913 tty2     Sl+    0:00 /usr/libexec/gnome-session-binary --session=ubuntu
    913     980 tty2     Sl+    0:00 /usr/libexec/gnome-session-binary --session=ubuntu
    913     981 tty2     Sl+    0:00 /usr/libexec/gnome-session-binary --session=ubuntu
   2200    2200 pts/0    Ss+    0:00 bash
   3673    3673 pts/1    Ss     0:00 /usr/bin/bash --init-file /usr/share/code/resources/app/out/vs/workbench/contrib/terminal/br
   3984    3984 pts/1    Sl+    0:00 ./main
   3984    3989 pts/1    Sl+    0:00 ./main
   3984    3990 pts/1    Sl+    0:00 ./main
   3984    3991 pts/1    Sl+    0:00 ./main
   3992    3992 pts/1    S+     0:00 sh -c ps -L H
   3993    3993 pts/1    R+     0:00 ps -L H
Le thread retourne 0
Le thread retourne 0
Le thread retourne 0

Voici le programme de la partie 1 :

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <pthread.h>
#include <math.h>

struct thread_info
{
    pthread_t thread_id;
    int thread_num;
};

void *thread_start(void *arg)
{
    struct thread_info *tinfo = arg;
    printf("Thread %i : pid = %i\n", tinfo->thread_num, getpid());
    sleep(10);
    pthread_exit((void *)EXIT_SUCCESS);
}

int main()
{
    int i;
    int num_thread = 3;
    struct thread_info *tinfo;
    pthread_attr_t attr;
    void *retval;

    system("clear");

    printf("Taille d'un pointeur void : %i\n", sizeof(void *));
    printf("2^%i-1 valeurs soit %i valeurs differentes peuvent etre stockees dans le pointeur void\n", sizeof(void *), (int)pow(256, sizeof(void *)) - 1);

    printf("Pere : pid = %lu\n", getpid());

    tinfo = calloc(num_thread, sizeof(struct thread_info));

    system("ps -L H");

    pthread_attr_init(&attr);

    for (i = 0; i < num_thread; i++)
    {
        tinfo[i].thread_num = i + 1;
        pthread_create(&tinfo[i].thread_id, &attr, &thread_start, &tinfo[i]);
    }

    system("ps -L H");

    for (i = 0; i < num_thread; i++)
    {
        pthread_join(tinfo[i].thread_id, &retval);
        printf("Le thread retourne %i\n", (int *)retval);
    }

    return EXIT_SUCCESS;
}



Partie 2 :

Voici quelques résultats obtenues avec le programme de la partie 2.a :

Pere : pid = 4626
Thread 1 : a = 2 | b = 2
Thread 0 : a = 3 | b = 3
Thread 2 : a = 2 | b = 2
Pere : Le thread 0 retourne 0
Pere : Le thread 1 retourne 0
Pere : Le thread 2 retourne 0

Pere : pid = 4655
Thread 0 : a = 3 | b = 4
Thread 1 : a = 3 | b = 3
Thread 2 : a = 3 | b = 3
Pere : Le thread 0 retourne 0
Pere : Le thread 1 retourne 0
Pere : Le thread 2 retourne 0

Pere : pid = 4676
Thread 2 : a = 1 | b = 0
Thread 1 : a = 1 | b = 0
Thread 0 : a = 1 | b = 1
Perre : Le thread 0 retourne 0
Perre : Le thread 1 retourne 0
Perre : Le thread 2 retourne 0

Pere : pid = 4700
Thread 2 : a = 1 | b = 1
Thread 0 : a = 1 | b = 2
Thread 1 : a = 1 | b = 2
Pere : Le thread 0 retourne 0
Pere : Le thread 1 retourne 0
Pere : Le thread 2 retourne 0

Pere : pid = 4745
Thread 1 : a = 2 | b = 2
Thread 2 : a = 2 | b = 2
Thread 0 : a = 2 | b = 2
Pere : Le thread 0 retourne 0
Pere : Le thread 1 retourne 0
Pere : Le thread 2 retourne 0

Pere : pid = 4775
Thread 0 : a = 3 | b = 4
Thread 1 : a = 3 | b = 4
Thread 2 : a = 2 | b = 3
Pere : Le thread 0 retourne 0
Pere : Le thread 1 retourne 0
Pere : Le thread 2 retourne 0

Voici quelques résultats obtenues avec le programme de la partie 2.b :

Pere : pid = 4431
Thread 1 : a = 2 | b = 2
Thread 0 : a = 3 | b = 3
Thread 2 : a = 2 | b = 2
Perre : Le thread 0 retourne 0
Perre : Le thread 1 retourne 0
Perre : Le thread 2 retourne 0

Pere : pid = 4460
Thread 0 : a = 2 | b = 2
Thread 2 : a = 1 | b = 1
Thread 1 : a = 2 | b = 2
Pere : Le thread 0 retourne 0
Pere : Le thread 1 retourne 0
Pere : Le thread 2 retourne 0

Pere : pid = 4481
Thread 0 : a = 2 | b = 2
Thread 1 : a = 4 | b = 4
Thread 2 : a = 3 | b = 3
Pere : Le thread 0 retourne 0
Pere : Le thread 1 retourne 0
Pere : Le thread 2 retourne 0

Voici le programme de la partie 2.b :

#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <semaphore.h>
#include <time.h>
#include <unistd.h>

int a = 1;
int b = 1;
sem_t sem;

int generateRandom(int min, int max)
{
    float result;
    if (min < 0)
    {
        printf("Erreur : fonction generateRandom : valeur min negative.\n");
        exit(EXIT_FAILURE);
    }
    do
    {
        result = (rand() % 101) / (100 / max);
    } while (result < min || result > max);
    return (int)result;
}

void *thread_routine(void *arg)
{
    int thread_num = *((long *)arg);

    sem_wait(&sem);

    sleep(generateRandom(0, 1));
    switch (thread_num)
    {
    case 0:
        a++;
        break;
    case 1:
        a *= 2;
        break;
    case 2:
        a--;
        break;

    default:
        break;
    }
    sleep(generateRandom(0, 1));
    switch (thread_num)
    {
    case 0:
        b++;
        break;
    case 1:
        b *= 2;
        break;
    case 2:
        b--;
        break;

    default:
        break;
    }
    sleep(generateRandom(0, 1));
    printf("Thread %i : a = %i | b = %i\n", thread_num, a, b);

    sem_post(&sem);

    sleep(1);

    pthread_exit(EXIT_SUCCESS);
}

int main()
{
    struct thread_info
    {
        pthread_t thread_id;
        int thread_num;
        void *retval;
    };

    int i, num_thread = 3;
    struct thread_info *tinfo;

    printf("Pere : pid = %i\n", getpid());

    tinfo = calloc(num_thread, sizeof(pthread_t));

    srand(time(NULL));

    sem_init(&sem, 0, 1);

    for (i = 0; i < num_thread; i++)
    {
        tinfo[i].thread_num = i;
        pthread_create(&tinfo[i].thread_id, NULL, &thread_routine, &tinfo[i].thread_num);
    }

    for (i = 0; i < num_thread; i++)
    {
        pthread_join(tinfo[i].thread_id, &tinfo[i].retval);
        printf("Pere : Le thread %i retourne %i\n", i, (int *)tinfo[i].retval);
    }
}



Partie 3 :

Pour cet exercice, j'ai dû utiliser plusieurs sémaphores.
Voici le programme de la partie 3 :

#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <semaphore.h>
#include <time.h>
#include <unistd.h>

int a = 1;
int b = 1;
sem_t sem1;
sem_t sem2;
sem_t sem3;

int generateRandom(int min, int max)
{
    float result;
    if (min < 0)
    {
        printf("Erreur : fonction generateRandom : valeur min negative.\n");
        exit(EXIT_FAILURE);
    }
    do
    {
        result = (rand() % 101) / (100 / max);
    } while (result < min || result > max);
    return (int)result;
}

void *thread_routine(void *arg)
{
    int thread_num = *((long *)arg);

    sleep(generateRandom(0, 1));
    switch (thread_num)
    {
    case 0:
        sem_wait(&sem2);
        a++;
        break;
    case 1:
        sem_wait(&sem3);
        a *= 2;
        break;
    case 2:
        sem_wait(&sem1);
        a--;
        break;

    default:
        break;
    }
    sleep(generateRandom(0, 1));
    switch (thread_num)
    {
    case 0:
        b++;
        break;
    case 1:
        b *= 2;
        break;
    case 2:
        b--;
        break;

    default:
        break;
    }
    sleep(generateRandom(0, 1));
    printf("Thread %i : a = %i | b = %i\n", thread_num, a, b);

    switch (thread_num)
    {
    case 0:
        sem_post(&sem3);
        break;
    case 2:
        sem_post(&sem2);
        break;
    
    default:
        break;
    }

    sleep(1);

    pthread_exit(EXIT_SUCCESS);
}

int main()
{
    struct thread_info
    {
        pthread_t thread_id;
        int thread_num;
        void *retval;
    };

    int i, num_thread = 3;
    struct thread_info *tinfo;

    printf("Pere : pid = %i\n", getpid());

    tinfo = calloc(num_thread, sizeof(pthread_t));

    srand(time(NULL));

    sem_init(&sem1, 0, 1);
    sem_init(&sem2, 0, 0);
    sem_init(&sem3, 0, 0);

    for (i = 0; i < num_thread; i++)
    {
        tinfo[i].thread_num = i;
        pthread_create(&tinfo[i].thread_id, NULL, &thread_routine, &tinfo[i].thread_num);
    }

    for (i = 0; i < num_thread; i++)
    {
        pthread_join(tinfo[i].thread_id, &tinfo[i].retval);
        printf("Pere : Le thread %i retourne %i\n", i, (int *)tinfo[i].retval);
    }
}



Partie 4 :

Voici le code de la partie 4 (il comprend la partie b) de l'exercice) :

#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <semaphore.h>
#include <time.h>
#include <unistd.h>

int generateRandom(int max)
{
    float result;
    result = rand()%(max+1);
    return (int)result;
}

sem_t sem_client;
sem_t sem_homme;
sem_t sem_femme;
sem_t sem_attente_coiffeur;

const int nbSiege = 5;
int nbH = 0;
int nbF = 0;

void *thread_client(void *arg)
{
    int sexe = *((int *)arg);
    if (sexe == 0)
        printf("Un client arrive.\n");
    else
        printf("Une cliente arrive.\n");
    sem_wait(&sem_client);
    if ((nbH + nbF) >= nbSiege)
    {
        sem_post(&sem_client);
        printf("Le/la client.e repart car il n'y a pas de place.\n");
        return EXIT_FAILURE;
    }
    else if (sexe == 0) // client homme
    {
        nbH++;
        sem_post(&sem_client);
        sem_post(&sem_attente_coiffeur);
        sem_wait(&sem_homme);
        sem_wait(&sem_client);
        nbH--;
        sem_post(&sem_client);
    }
    else // cliente femme
    {
        nbF++;
        sem_post(&sem_client);
        sem_post(&sem_attente_coiffeur);
        sem_wait(&sem_femme);
        sem_wait(&sem_client);
        nbF--;
        sem_post(&sem_client);
    }
}

void *thread_coiffeurH()
{
    printf("Coiffeur cree.\n");
    while (1)
    {
        sem_wait(&sem_attente_coiffeur);
        if (nbH > 0)
        {
            sem_post(&sem_homme);
            printf("Le coiffeur coiffe un homme.\n");
        }
        else
        {
            sem_post(&sem_femme);
            printf("Le coiffeur coiffe une femme.\n");
        }
        sleep(generateRandom(15));
    }
}

void *thread_coiffeurF()
{
    printf("Coiffeuse creee.\n");
    while (1)
    {
        sem_wait(&sem_attente_coiffeur);
        if (nbF > 0)
        {
            sem_post(&sem_femme);
            printf("La coiffeuse coiffe une femme.\n");
        }
        else
        {
            sem_post(&sem_homme);
            printf("La coiffeuse coiffe un homme.\n");
        }
        sleep(generateRandom(15));
    }
}

int main()
{
    pthread_t thread;

    sem_init(&sem_client, 0, 1);
    sem_init(&sem_homme, 0, 0);
    sem_init(&sem_femme, 0, 0);
    sem_init(&sem_attente_coiffeur, 0, 0);

    srand(time(NULL));

    pthread_create(&thread, NULL, &thread_coiffeurH, NULL);
    pthread_create(&thread, NULL, &thread_coiffeurF, NULL);

    while (1)
    {
        int sexe = generateRandom(1);
        pthread_create(&thread, NULL, &thread_client, &sexe);
        printf("nbH : %i | nbF : %i | nbClient : %i\n", nbH, nbF, nbH+nbF);
        sleep(generateRandom(3));
    }

    return EXIT_SUCCESS;
}