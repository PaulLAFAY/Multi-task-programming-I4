Compte rendu du TP1 - Programmation multi-tâches - Paul LAFAY I4GRIT

2) Ignorer les signaux :

	A)

Liste des signaux classés par numéros :

1 - Hangup
2 - Interrupt
3 - Quit
4 - Illegal instruction
5 - Trace/breakpoint trap
6 - Aborted
7 - Bus error
8 - Floating point exception
9 - Killed
10 - User defined signal 1
11 - Segmentation fault
12 - User defined signal 2
13 - Broken pipe
14 - Alarm clock
15 - Terminated
16 - Stack fault
17 - Child exited
18 - Continued
19 - Stopped (signal)
20 - Stopped
21 - Stopped (tty input)
22 - Stopped (tty output)
23 - Urgent I/O condition
24 - CPU time limit exceeded
25 - File size limit exceeded
26 - Virtual timer expired
27 - Profiling timer expired
28 - Window changed
29 - I/O possible
30 - Power failure
31 - Bad system call

Il y a 31 signaux utiles. Le signal 0 est inconnu et au delà du 31 ce sont des signaux temps réels.
(cf. le programme à la fin de la partie 2)

	B) 

Liste des signaux qui ne sont pas ignorables :

9 - Killed
19 - Stopped (signal)

Ils ne sont pas ignorables car si l'OS laisse la possibilité à l'utilisateur de redéfinir les acitons liées à ces deux signaux, le système risque d'accumuler les erreures.
En d'autres mots, l'OS doit garder le contrôle absolu sur ces deux processus.
(cf. le programme à la fin de la partie 2)

	C)

J'ai utilisé la commande suivante pour arréter le processus du programme :
	ps -a (pour connaitre le pid du programme)
	kill -9 <pid du programme> (pour arréter le processus)

	D)

Lorsque l'on fait <CTRL>+C, il ne se passe rien. Cette combinaison de touche envoie en temps normal le signal n°2 (SIGINT) or dans notre cas ce signal est ignoré.
Seul les signaux 9 et 19 ont un effet sur le processus car ils sont les seuls à ne pas être ignorés.
Le signal 9 arrête définitivement le processus.
Le signal 19 lui, le met en "pause". Ce processus peut être réveillé grâce au signal 18.

Programme de la partie 2 :

#include <unistd.h>
#include <signal.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int main(int argc, char *argv[]){

	int N = 31;
	int i;

	for(i = 1; i <= N; i++)
		printf("%i - %s\n", i, strsignal(i));

	for(i = 1; i <= N; i++)
		if(signal(i, SIG_IGN) == SIG_ERR)
			printf("Le signal %i - %s ne peut pas etre ignore.\n", i, strsignal(i));

	while(1)
		sleep(1);

	return EXIT_SUCCESS;

}



3) Traitement spécifique des signaux :

	A)

Les signaux 9 (Killed) et 19 (Stopped (signal)) ne peuvent pas être traités spécifiquement.

	B)

En utilisant les commandes :
	ps -a (pour connaitre le pid du programme)
	kill -<code du signal> <pid du programme> (pour envoyer un signal au programme)

J'obtiens :
	Le signal 9 - Killed ne peut pas etre traite specifiquement.
	Le signal 19 - Stopped (signal) ne peut pas etre traite specifiquement.
	Fonction Traite_Sig : j'ai reçu le signal 1 - Hangup
	Fonction Traite_Sig : j'ai reçu le signal 2 - Interrupt
	Fonction Traite_Sig : j'ai reçu le signal 20 - Stopped
	Fonction Traite_Sig : j'ai reçu le signal 30 - Power failure

En utilisant ce programme :

#include <signal.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

void Traite_Sig(int sigId){

	printf("Fonction Traite_Sig : j'ai reçu le signal %i - %s\n", sigId, strsignal(sigId));

}

int main(int argc, char *argv[]){

	int N = 31;
	int i;

	for (i = 1; i <= N; i++)
		if (signal(i, Traite_Sig) == SIG_ERR)
			printf("Le signal %i - %s ne peut pas etre traite specifiquement.\n", i, strsignal(i));

	while (1)
		sleep(1);

	return EXIT_SUCCESS;

}



4) Utilisation de SIGUSR1 et SIGUSR2 :

En utilisant la commande :
	kill -<code du signal> <pid du programme> (pour envoyer un signal au programme)

J'obtiens :
	Pid du programme : 8751
	Signal recu : 1 - Hangup
	Signal recu : 10 - User defined signal 1
	paul     tty2         2022-10-21 08:14 (tty2)
	Signal recu : 17 - Child exited
	Signal recu : 12 - User defined signal 2
	Filesystem     1K-blocks     Used Available Use% Mounted on
	/dev/sda3       50770432 12218092  35940936  26% /
	Signal recu : 17 - Child exited
	Signal recu : 15 - Terminated

Lors de l'envoi des signaux 10 et 12 qui correspondent à SIGUSR1 et SIGUSR2, le signal 17 (SIGCHLD) est ennvoyé.
Il est utilisé pour réveillé un processus dont le fils vient de mourrir.
Ici, il est envoyé car la commande "system()" créer un processus fils à celui du programme pour exécuter la commande shell spécifiée.
Une fois cette commande exécutée, ce processus fils meurt donc le signal SIGCHLD est envoyé à son père (donc au processus du programme).

Programme de la partie 4 :

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <signal.h>

void fonc(int sigId) {
    printf("Signal recu : %i - %s\n", sigId, strsignal(sigId));
}

void fonc1(int sigId) {
    fonc(sigId);
    system("who");
}

void fonc2(int sigId) {
    fonc(sigId);
    system("df .");
}

int main(int argc, char *argv[]) {

    int N = 31;
    int i;

    printf("Pid du programme : %i\n", getpid());

    for (i = 1; i <= N; i++)
        if (i != 9 && i != 10 && i != 12 && i != 19)
            signal(i, fonc);
    
    signal(10, fonc1);
    signal(12, fonc2);

    while (1)
        sleep(1);

}

5) Signaux et sleep :

Lorsque j'envoie un signal quelconque (hors 9, 19, 10 et 12), le programme affiche ceci :
	Signal recu : 3 - Quit
	Je dors

Lorsque j'envoie un signal SIGUSR1 (10), le programme n'affiche rien.

Lorsque j'envoie un signal SIGUSR2 (12), le programme affiche ceci :
	J'ai recu le signal
	Je dors

Lorsque qu'un signal traitable spécifiquement est envoyé, le programme le traite de la manière qui convient puis affiche "Je dors".
Cela veut dire que lorsqu'un signal est reçu, le processus qui dormait (avec le sleep(10)) se réveille, traite le signal et continue le programme.

Voici le programme :

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <signal.h>

void fonc(int sigId) {
    printf("Signal recu : %i - %s\n", sigId, strsignal(sigId));
}

void fonc1(int sigId) {
    printf("J'ai recu le signal\n");
}

int main(int argc, char *argv[]) {

    int N = 31;
    int i;

    printf("Pid du programme : %i\n", getpid());

    for (i = 1; i <= N; i++)
        if (i != 9 && i != 10 && i != 12 && i != 19)
            signal(i, fonc);
    
    signal(10, SIG_IGN);
    signal(12, fonc1);

    while (1) {
        sleep(10);
        printf("Je dors\n");
    }

}



6) Traitement de SIGFPE :

	A)

Lorsque l'erreur se produit, le programme "boucle" sur l'erreur et affiche "Detection d'un erreur" à l'infinie.

	B)

Voici le programme :

#include <stdio.h>
#include <stdlib.h>
#include <signal.h>
#include <setjmp.h>

sigjmp_buf mark;

void traite_FPE(int sigId)
{
    printf("Detection d'une erreur : %i - %s\n", sigId, strsignal(sigId));
    siglongjmp(mark, 1);
}

int main()
{
    float res;
    int num = 2;
    int den = 0;

    signal(SIGFPE, traite_FPE);

    if (sigsetjmp(mark, 1) == 1)
        printf("Reprise sur erreur\n");

    sleep(1);
    printf("Attention a la division par zero\n");
    res = num / den;
    printf("Resultat : %f", res);

    return EXIT_SUCCESS;
}



7) Star Wars !

Dans ce programme, la fonction main gère le gros du déroulé du jeu. A celle-ci viennent se greffer les fonctions d'actions et les handlers de signaux.
J'ai utiliser un fork dans le code pour générer un processus pour Luc (le fils de Vador).
J'ai dû utiliser SIGUSR2 pour gérer les morts. En effet, si je ne le faisait pas, le cas où Vador mourrait (le processus père) me posait problème.

Voici le programme commenté :

// librairies
#include <stdio.h>
#include <stdlib.h>
#include <signal.h>
#include <unistd.h>
#include <time.h>
#include <setjmp.h>
#include <string.h>

// préprocesseur
#define PTS_VIE 6

// structure générale d'un personnage
struct Personnage // Config par défaut :
{                 // Luc         Vador
    char nom[20]; // SkyWalker   Dark Vador
    int PV;       // PTS_VIE     PTS_VIE
    int attSpeed; // 2           3
    int attDeg;   // 1           3
};

// variables globales
const struct Personnage sw = {"Skywalker", PTS_VIE, 2, 1};
const struct Personnage dv = {"Dark Vador", PTS_VIE, 3, 3};
struct Personnage perso;
sigjmp_buf env1;
sigjmp_buf env2;
sigjmp_buf env3;

// fonctions en lien avec la gestion des signaux
void handlerGod() // handler du signal d'interruption (quand dieu veut arréter le combat)
{
    int i;
    for (i = 1; i <= 31; i++) // ignore tous les signaux
        signal(i, SIG_IGN);
    if (strcmp(perso.nom, dv.nom) == 0) // n'affiche cette phrase que dans le processus de Vador pour ne pas dédoubler le printf
        printf("\nDieu (la force) : Cessez cette bagarre ridicule !\n[Fin du combat]\n");
    exit(EXIT_SUCCESS);
}

void handlerUsr1() // handler du signal sigusr1 (attaques au sabre laser)
{
    signal(SIGUSR1, SIG_IGN);
    siglongjmp(env1, 1);
}

void handlerUsr2() // handler du signal sigusr2 (mort de l'autre joueur)
{
    if (strcmp(perso.nom, dv.nom) == 0) // renvoi sur le bout de code qui convient
        siglongjmp(env2, 1);
    else
        siglongjmp(env3, 1);
}

void sigConfig() // configuration des handler des signaux
{
    int i;
    for (i = 1; i <= 31; i++)
        if (i != 2 && i != 9 && i != 12 && i != 17 && i != 19)
            signal(i, SIG_IGN);
    signal(SIGINT, handlerGod);
    signal(SIGUSR2, handlerUsr2);
}

// fonctions en lien avec la gestion des personnages
void lanceAtt(int pid, struct Personnage perso) // procedure de lancement d'une attaque
{
    printf("%s : Je lance une attaque !\n", perso.nom);
    signal(SIGUSR1, handlerUsr1); // baisse sa garde
    sleep(perso.attSpeed);        // temps de charge de l'attaque et attente d'un potentiel coup de l'adversaire
    kill(pid, SIGUSR1);           // coup de sabre laser
    signal(SIGUSR1, SIG_IGN);     // se remet en garde
}

void subitAttaques(struct Personnage *perso, struct Personnage sw, struct Personnage dv) // quand le joueur subit une attaque
{
    if (strcmp(perso->nom, sw.nom) == 0) // décompte des points de vie
        perso->PV -= dv.attDeg;
    else if (strcmp(perso->nom, dv.nom) == 0)
        perso->PV -= sw.attDeg;
}

int generateRandom(int min, int max) // génère une valeur aléatoire comprise dans l'interval [min;max]
{
    float result;
    if (min < 0) // pour les besoins du programme, je ne veux pas généner de valeur négative
    {
        printf("Erreur : fonction generateRandom : valeur min negative.\n");
        exit(EXIT_FAILURE);
    }
    do
    {
        result = (rand() % 101) / (100 / max); // formule pour obtenir un nombre dans la range voulue
    } while (result < min || result > max);
    return (int)result;
}

// fonction main
int main()
{
    // déclaration des variables
    int pidAdverse;
    int i;

    // gestion des signaux
    sigConfig();

    // message du début (avant le fork() pour n'apparaitre qu'une seule fois)
    printf("[Debut du combat]\n");

    // obtention des pid et selection des personnages
    pidAdverse = fork();
    if (pidAdverse == 0)
    { // initialise 'perso' avec les valeurs de Luc
        for (i = 0; i < 20; i++)
            perso.nom[i] = sw.nom[i];
        perso.PV = sw.PV;
        perso.attSpeed = sw.attSpeed;
        perso.attDeg = sw.attDeg;
        pidAdverse = getppid();
    }
    else
    { // initialise 'perso' avec les valeurs de Vador
        for (i = 0; i < 20; i++)
            perso.nom[i] = dv.nom[i];
        perso.PV = dv.PV;
        perso.attSpeed = dv.attSpeed;
        perso.attDeg = dv.attDeg;
    }

    // initialisation de la génération de nombres aléatoires
    srand(time(NULL));
    // les nombres aléatoires ne sont pas vraiment aléatoires : il forment une série. Pour éviter que Vador et Luc aient le même temps d'attente entre 2 attaques, je décale la série du coté de Luc en générant un nombre aléatoire de valeur aléatoire
    if (strcmp(perso.nom, sw.nom) == 0)
    {
        for (i = 0; i < generateRandom(5, 100); i++)
            generateRandom(1, 5);
    }

    // déroulement du jeu
    while (1)
    {
        if (sigsetjmp(env1, 1) == 1) // si le joueur subit une attaque
        {
            printf("%s : [Attaque echouee]\n%s : Je subis une attaque !\n", perso.nom, perso.nom);
            printf("%s : Decompte des degats...\n", perso.nom);
            subitAttaques(&perso, sw, dv);
            printf("%s : Mes PV : %i\n", perso.nom, perso.PV);
            if (perso.PV <= 0) // si le joueur doit mourir
            {
                printf("%s : Je suis mort.\n", perso.nom);
                kill(pidAdverse, SIGUSR2); // dit à l'autre joueur que celui-ci est mort
                break;
            }
        }

        if (sigsetjmp(env2, 1) == 1) // si c'est Luc qui meurt
        {
            printf("%s : Mon fils est mort...\n%s : Adieu !\n", perso.nom, perso.nom);
            printf("[Fin du combat]\n");
            break;
        }

        if (sigsetjmp(env3, 1) == 1) // si c'est Vador qui meurt
        {
            printf("%s : Mon pere est mort...\n%s : Adieu !\n", perso.nom, perso.nom);
            printf("[Fin du combat]\n");
            break;
        }

        int cooldown = generateRandom(1, 5);
        printf("%s : Prochaine attaque dans %is\n", perso.nom, cooldown);
        sleep(cooldown);

        lanceAtt(pidAdverse, perso);
    }

    return EXIT_SUCCESS; // fin du programme
}
